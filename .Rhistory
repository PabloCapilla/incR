data.final$day.var[k] <- stats::var (day.data$valueT, na.rm=TRUE)
#
# NIGHT CALCULATIONS
#
# selecting time
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec.time > night.evening & df00$dec.time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec.time > night.evening & df00$dec.time < 24, ]
date.after <- base::unique (df00$date)+1
day.after <- df01[[base::as.character(date.after)]]
subset.morning <- day.after [day.after$dec.time > 0 & day.after$dec.time < night.morning, ]
subset.data <- base::rbind(subset.nightBefore, subset.morning)
}
}
# computing number after sorting the data by time limits
if (night.morning > 0) {
data.final$night.mean[k] <- base::mean( subset.data$valueT, na.rm=TRUE)
data.final$night.var[k] <- stats::var( subset.data$valueT, na.rm=TRUE)
} else {
data.final$night.mean[k] <- NA
data.final$night.var[k] <- NA
}
}
return (data.final)
}
incR.t (data=df.incubation,
limits=c(5,20),
coor=NULL,
civil.twilight=FALSE,
activity.times=TRUE,
time.below= c(10,25,32),
time.zone="GMT")
incR.t (data=df.incubation,
limits=c(5,20),
coor=NULL,
civil.twilight=FALSE,
activity.times=FALSE,
time.zone="GMT")
#' ## References
data=df.incubation
limits=c(5,20)
coor=NULL
civil.twilight=FALSE
activity.times=FALSE
time.zone="GMT"
if (base::is.null(data$date)) {
stop("No column with name 'date' found")
}
data.onoff.act <- data
df01 <- base::split (data, data$date)
# defining table to write results in
data.final <- base::data.frame (date=rep(NA, length=base::length(df01)),
day.mean=rep(NA, length=base::length(df01)),
day.var=rep(NA, length=base::length(df01)),
night.mean=rep(NA, length=base::length(df01)),
night.var=rep(NA, length=base::length(df01)))
act.times <- base::data.frame (date=base::as.character(base::names(df01)),
onset=rep(limits[1], length=base::length(df01)),
onset=rep(limits[2], length=base::length(df01)))
act.times
base::names(act.times)<- c("date", "onset", "offset")
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
act.times
k=1
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique(df00$date))
# based on the calculations above, day and night mean and var in temperature are
# calculated. Time limits for the calculations are needed
index <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("index")]
day.morning <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("onset")]
day.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.morning <- act.times [act.times$index==index+1, c("onset")]
day.data <- df00[df00$dec.time > day.morning & df00$dec.time < day.evening, ]
data.final$day.mean[k] <- base::mean (day.data$valueT, na.rm=TRUE)
data.final$day.var[k] <- stats::var (day.data$valueT, na.rm=TRUE)
#
# selecting time
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec.time > night.evening & df00$dec.time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec.time > night.evening & df00$dec.time < 24, ]
date.after <- base::unique (df00$date)+1
day.after <- df01[[base::as.character(date.after)]]
subset.morning <- day.after [day.after$dec.time > 0 & day.after$dec.time < night.morning, ]
subset.data <- base::rbind(subset.nightBefore, subset.morning)
}
}
# computing number after sorting the data by time limits
if (night.morning > 0) {
data.final$night.mean[k] <- base::mean( subset.data$valueT, na.rm=TRUE)
data.final$night.var[k] <- stats::var( subset.data$valueT, na.rm=TRUE)
} else {
data.final$night.mean[k] <- NA
data.final$night.var[k] <- NA
}
data.final
k=2
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique(df00$date))
index <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("index")]
day.morning <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("onset")]
day.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.morning <- act.times [act.times$index==index+1, c("onset")]
day.morning
day.evening
night.evening
night.morning
day.data <- df00[df00$dec.time > day.morning & df00$dec.time < day.evening, ]
data.final$day.mean[k] <- base::mean (day.data$valueT, na.rm=TRUE)
data.final$day.var[k] <- stats::var (day.data$valueT, na.rm=TRUE)
data.final
night.evening
if (night.morning > 0) { # is there one day ahead for calculations?
# selecting night window
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec.time > night.evening & df00$dec.time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec.time > night.evening & df00$dec.time < 24, ]
date.after <- base::unique (df00$date)+1
day.after <- df01[[base::as.character(date.after)]]
subset.morning <- day.after [day.after$dec.time > 0 & day.after$dec.time < night.morning, ]
subset.data <- base::rbind(subset.nightBefore, subset.morning)
}
}
data.final$night.mean[k] <- base::mean( subset.data$valueT, na.rm=TRUE)
data.final$night.var[k] <- stats::var( subset.data$valueT, na.rm=TRUE)
} else {
data.final$night.mean[k] <- NA
data.final$night.var[k] <- NA
}
night.morning > 0
if (base::length(night.morning) > 0) { # is there one day ahead for calculations?
# selecting night window
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec.time > night.evening & df00$dec.time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec.time > night.evening & df00$dec.time < 24, ]
date.after <- base::unique (df00$date)+1
day.after <- df01[[base::as.character(date.after)]]
subset.morning <- day.after [day.after$dec.time > 0 & day.after$dec.time < night.morning, ]
subset.data <- base::rbind(subset.nightBefore, subset.morning)
}
}
data.final$night.mean[k] <- base::mean( subset.data$valueT, na.rm=TRUE)
data.final$night.var[k] <- stats::var( subset.data$valueT, na.rm=TRUE)
} else {
data.final$night.mean[k] <- NA
data.final$night.var[k] <- NA
}
data.final
incR.t <- function (data,
limits=NULL,
coor,
activity.times=FALSE,
civil.twilight=FALSE,
time.zone=NULL) {
# checking whether there is a date column
if (base::is.null(data$date)) {
stop("No column with name 'date' found")
}
# data by days
data.onoff.act <- data
df01 <- base::split (data, data$date)
# defining table to write results in
data.final <- base::data.frame (date=rep(NA, length=base::length(df01)),
day.mean=rep(NA, length=base::length(df01)),
day.var=rep(NA, length=base::length(df01)),
night.mean=rep(NA, length=base::length(df01)),
night.var=rep(NA, length=base::length(df01)))
# this function allows three options to calculate nest temperatures between
# two periods of time within 24hrs.
# (1) you specify the time window you want
## to compute day and night mean and variation;
# (2) it takes onset and offset activity using incR.activity; or,
# (3) uses civil twilight times to define night
# times to define day and night periods and calculate variation and temperature.
#
# First I create a table which specifies such periods depending on 1, 2 or 3.
if (activity.times==TRUE) {
# calculates onset and offset activity times
act.times <- incR.activity (data= data.onoff.act,
vector.incubation="inc.vector")
if (base::is.null(data.onoff.act$inc.vector)) {
stop ("Your incubation.vector for incR.activity is not named 'inc.vector',
please, change its name to 'inc.vector' or specify it in
incR.t adding an argument as in incR.activity: 'incubation.vector= '")
}
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
} else {
if (civil.twilight==TRUE) {
if (base::is.null(time.zone)) {
stop ("Time zone not specified; please, do it by passing an extra argument
to the incR.t function as 'time.zone ='")
}
# calculates civil twilinght times
dawn <- stats::na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
dawn$day_frac <- NULL
dawn$dusk <-  stats::na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE))[,2]
names(dawn) <- c("dawn.time", "dusk.time")
# re-calculating decimal hours
dawn$onset <- base::sapply(base::strsplit(base::strftime (dawn$dawn.time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dawn$offset <- base::sapply(base::strsplit(base::strftime (dawn$dusk.time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dawn$date <- base::as.character(as.POSIXlt(base::as.character(dawn$dawn.time),
tz = time.zone, format= "%Y-%m-%d"))
act.times <- dawn
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
} else {
if (length(limits) < 2) {stop ("Please specify 'limits'")} # are there limits available?
act.times <- base::data.frame (date=base::as.character(base::names(df01)),
onset=rep(limits[1], length=base::length(df01)),
onset=rep(limits[2], length=base::length(df01)))
base::names(act.times)<- c("date", "onset", "offset")
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
}
}
# loop to fill table of results
for (k in 1:(base::length(df01))) {
# each day one by one
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique(df00$date))
# based on the calculations above, day and night mean and var in temperature are
# calculated. Time limits for the calculations are needed
index <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("index")]
day.morning <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("onset")]
day.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.morning <- act.times [act.times$index==index+1, c("onset")]
# once the limits are set, the correct time points need to be selected
#
# DAY CALCULATIONS
#
day.data <- df00[df00$dec.time > day.morning & df00$dec.time < day.evening, ]
data.final$day.mean[k] <- base::mean (day.data$valueT, na.rm=TRUE)
data.final$day.var[k] <- stats::var (day.data$valueT, na.rm=TRUE)
#
# NIGHT CALCULATIONS
#
# selecting time
# computing number after sorting the data by time limits
if (base::length(night.morning) > 0) { # is there one day ahead for calculations?
# selecting night window
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec.time > night.evening & df00$dec.time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec.time > night.evening & df00$dec.time < 24, ]
date.after <- base::unique (df00$date)+1
day.after <- df01[[base::as.character(date.after)]]
subset.morning <- day.after [day.after$dec.time > 0 & day.after$dec.time < night.morning, ]
subset.data <- base::rbind(subset.nightBefore, subset.morning)
}
}
data.final$night.mean[k] <- base::mean( subset.data$valueT, na.rm=TRUE)
data.final$night.var[k] <- stats::var( subset.data$valueT, na.rm=TRUE)
} else {
data.final$night.mean[k] <- NA
data.final$night.var[k] <- NA
}
}
return (data.final)
}
incR.t (data=df.incubation,
limits=c(5,20),
coor=NULL,
civil.twilight=FALSE,
activity.times=FALSE,
time.zone="GMT")
library(incR)
devtools::document()
devtools::document()
library(incR)
devtools::document()
incR.t (data=df.incubation,
limits=c(5,20),
coor=NULL,
civil.twilight=FALSE,
activity.times=FALSE,
time.zone="GMT")
incR.t (data=df.incubation,
limits=c(5,20),
coor=NULL,
civil.twilight=TRUE,
activity.times=FALSE,
time.zone="GMT")
incR.t (data=df.incubation,
limits=c(5,20),
coor=NULL,
civil.twilight=FALSE,
activity.times=TRUE,
time.zone="GMT")
incR.t (data=df.incubation,
limits=c(5,20),
coor=NULL,
civil.twilight=TRUE,
activity.times=FALSE,
time.zone="GMT")
?maptools::crepuscule
dawn <- stats::na.omit(maptools::crepuscule(crds=base::matrix(c(coor[1], coor[2]), nrow=1),
dateTime=base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
c(coor[1], coor[2])
incR.t (data=df.incubation,
limits=c(5,20),
coor=c(42,10),
civil.twilight=TRUE,
activity.times=FALSE,
time.zone="GMT")
library(incR)
library(incR)
devtools::document()
data<- read.csv("data/K22iButton.0805.cameracali.csv")
devtools::use_data(data, incR.dataExample)
devtools::use_data(incR.dataExample,data)
devtools::use_data(incR.dataExample,data)
?devtools::use_data
incR.dataExample<- read.csv("data/K22iButton.0805.cameracali.csv")
devtools::use_data(incR.dataExample)
dim(incR.dataExample)
names(incR.dataExample)
incR.dataExample<- read.csv("data/K22iButton.0805.cameracali.csv")
incR.dataExample<- read.csv("data/K22iButton.0805.cameracali.csv")
devtools::use_data(incR.dataExample)
devtools::document()
devtools::document()
?incR.prep
library(incR)
?"incR.prep"
data(incR::inR.dataExample)
data(incR::incR.dataExample)
data(incR.dataExample)
names(incR.dataExample)
data <-read.csv ("data/K22iButton.0805.cameracali.csv")
data("incR.dataExample")
new.data <- incR.prep (data=incR.dataExample,
date.name= "DATE",
date.format= "%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
incubation.analysis <- incR.scan (data,
lower.time=22,
upper.time=3,
maxinc.Temp=38,
sensitivity=0.15,
time.dif=20,
maxNightVar_accepted=2,
env.data=FALSE,
env.temp=NULL)
incubation.analysis <- incR.scan (data=new.data,
lower.time=22,
upper.time=3,
maxinc.Temp=38,
sensitivity=0.15,
time.dif=20,
maxNightVar_accepted=2,
env.data=FALSE,
env.temp=NULL)
incR.dataExample<- read.csv("data/K22iButton.0805.cameracali.csv")
incR.incubationExample <- incubation.analysis[[1]]
devtools::use_data(incR.incubationExample)
names(incR.incubationExample)
incR.t (data=incR.incubationExample,
limits=NULL,
coor=c(42,0.89),
civil.twilight=TRUE,
activity.times=FALSE,
time.zone="GMT")
devtools::document()
devtools::document()
devtools::document()
library(incR)
?"incR.incubationExample"
devtools::document()
library(incR)
library(incR)
data(incR.dataExample)
df <- data(incR.dataExample)
devtools::install_github("PabloCapilla/incR")
sr <- df.incubation$dec.time[5]-df.incubation$dec.time[4]
is.null(df.incubation$inc.vector)
df.incubation <- inc.example[[1]]
df.prep <- incR.prep (data= df,
date.name="DATE",
date.format="%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
df <- data(incR.dataExample) #reading data
df$PRESENCE <- NULL
df$ENTERING <- NULL
df$LEAVING <- NULL
df$MISSED <- NULL
df$valueH <- NULL
str(df) # preliminar exploration
df
data(incR.dataExample) #reading data
df <- incR.dataExample
df$PRESENCE <- NULL
df$ENTERING <- NULL
df$LEAVING <- NULL
df$MISSED <- NULL
df$valueH <- NULL
str(df) # preliminar exploration
df.prep <- incR.prep (data= df,
date.name="DATE",
date.format="%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
inc.example <- incR.scan (data=df.prep,            # data frame
lower.time=22,           # beginning of calibrating window
upper.time=3,            # end of calibrating window
maxinc.Temp=38,          # temperature of incubation
sensitivity=0,           # correction when nest Tª is
# far below maxinc.Temp
time.dif=20,             # diff in Tª from maxinc.Temp that
# triggers sensitivity change
maxNightVar_accepted=2,  # max night variation accepted in
# calibrating windows
env.data=FALSE)          # is environmental data provided?
df.incubation <- inc.example[[1]]
plot.example <- df.incubation[df.incubation$date=="2015-05-07",]
# plot
plot (valueT ~ dec.time, data=plot.example,
pch=19,
main=list("Blue tit incubation 07/05/2015"),
col=c("red", "black")[plot.example$inc.vector+1],# pch color defined by "inc.vector"
xaxt="n", las=1, cex.axis=1.5,# no x-axis, horizontal y axis-labels and size
xlab=list("Time", cex=1.5),
ylab=list("Temperature (ºC)", cex=1.5))
axis (side=1,                       # x-axis
at= plot.example$dec.time,    # location of marks
labels=plot.example$time)     # label for marks
legend ("bottomleft", bty="n",
pch=c(19,19),
col=c("red", "black"),
legend=c("Ind. in", "Ind. out"), cex=1.3)
df.activity <- incR.activity (data=df.incubation,
vector.incubation ="inc.vector")
df.activity
inc.constancy <- incR.constancy (data=df.incubation,
vector.incubation ="inc.vector")
inc.constancy
sr <- df.incubation$dec.time[5]-df.incubation$dec.time[4]
bouts.example <- incR.bouts (data=df.incubation,
vector.incubation="inc.vector",
sampling.rate=sr)
bouts.example
is.null(df.incubation$inc.vector)
head (df.incubation$inc.vector, 5)
incR.t (data=df.incubation,
limits=NULL,
coor=NULL,
civil.twilight=FALSE,
activity.times=TRUE,
time.zone="GMT")
df.prep <- incR.prep (data= df,
date.name="DATE",
date.format="%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
library(incR)
library(incR)
library(incR)
?"incR"
library(incR)
devtools::check()
devtools::document()
library(incR)
devtools::check()
devtools::document()
devtools::document()
library(incR)
devtools::document()
devtools::check()
library(incR)
devtools::document()
devtools::check()
devtools::check()
R.version()
R.Version()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
library(incR)
