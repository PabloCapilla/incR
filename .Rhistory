next()
}
while (utils::tail(start.loop, 1) < base::nrow(presence.seq)) {
ind <- utils::tail(start.loop, 1)
state <- presence.seq$vector.presence00[ind]
for (j in (ind+1):base::nrow(presence.seq)) {
if (presence.seq$vector.presence00[j] != state) {
end <- presence.seq$index2[j]
break()
} else {next()}
}
start.loop <- base::c(start.loop, end)
}
# the "start.loop" vector contains the info on length and number of daily on/off bouts
df08 <- base::data.frame(cbind (start.loop, seq(1, to=length(start.loop), by=1)))
if (base::length(start.loop) < 3){next()}
offbout.index <- base::seq(1, to=base::length (start.loop), 2)
onbout.index <- base::seq(2, to=base::length (start.loop)-1, 2)
data.final$number.off.bouts[k] <- base::length(start.loop [offbout.index])
data.final$number.on.bouts[k] <- base::length(start.loop [onbout.index])
#
# length of off- bouts
temp.var1 <- NA
for (l in 1:base::length(offbout.index)) {
temp.var1[l] <- df08$start.loop [df08$V2==offbout.index[l]+1] - start.loop [offbout.index[l]]
}
data.final$mean.time.off.bout[k] <-  base::mean (temp.var1, na.rm=TRUE) * sampling.rate
#
# length of on- bouts
temp.var2 <- NA
for (l in 1:base::length(onbout.index)) {
temp.var2[l] <- df08$start.loop [df08$V2==onbout.index[l]+1] - start.loop [onbout.index[l]]
}
data.final$mean.time.on.bout[k] <-  base::mean (temp.var2, na.rm=TRUE) * sampling.rate
}
k
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique (df00$date))  # working date
vector.presence00 <- df00[[vector.incubation]]
vector.index <- base::seq(1, to= length(df00[[vector]]), by=1)
vector.index <- base::seq(1, to= length(df00[[vector.incubation]]), by=1)
vector.presence01 <- base::data.frame(base::cbind (vector.index, vector.presence00))
for (k in 1:final.loop) {
# selecting working day
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique (df00$date))  # working date
# selecting presence after the first off-bout
vector.presence00 <- df00[[vector.incubation]]
vector.index <- base::seq(1, to= length(df00[[vector.incubation]]), by=1)
vector.presence01 <- base::data.frame(base::cbind (vector.index, vector.presence00))
# first off-bout of the day
for (p in 1:base::nrow(vector.presence01)) {
if (vector.presence01$vector.presence00[p] == 0){
starting.point <- vector.presence01$vector.index[p]
break()
} else {next()}
}
# last on-bout of the day
for (p in 1:base::nrow(vector.presence01)) {
if (base::rev(vector.presence01$vector.presence00)[p] == 0){
ending.point <- base::rev(vector.presence01$vector.index)[p]
break()
} else {next()}
}
# selecting the window between first off-bout and last on-bout
presence.seq <- vector.presence01[vector.index >= starting.point &
vector.index <= ending.point+1, ]
presence.seq$index2 <- base::seq(1, to=base::nrow(presence.seq), by= 1)
#
# calculation of the number of on and off bouts, using loops and
# temporaly variables
start.loop <- 1
if (utils::tail(presence.seq$vector.index, 1) == utils::tail(vector.presence01$vector.index, 1)) {
next()
}
while (utils::tail(start.loop, 1) < base::nrow(presence.seq)) {
ind <- utils::tail(start.loop, 1)
state <- presence.seq$vector.presence00[ind]
for (j in (ind+1):base::nrow(presence.seq)) {
if (presence.seq$vector.presence00[j] != state) {
end <- presence.seq$index2[j]
break()
} else {next()}
}
start.loop <- base::c(start.loop, end)
}
# the "start.loop" vector contains the info on length and number of daily on/off bouts
df08 <- base::data.frame(cbind (start.loop, seq(1, to=length(start.loop), by=1)))
if (base::length(start.loop) < 3){next()}
offbout.index <- base::seq(1, to=base::length (start.loop), 2)
onbout.index <- base::seq(2, to=base::length (start.loop)-1, 2)
data.final$number.off.bouts[k] <- base::length(start.loop [offbout.index])
data.final$number.on.bouts[k] <- base::length(start.loop [onbout.index])
#
# length of off- bouts
temp.var1 <- NA
for (l in 1:base::length(offbout.index)) {
temp.var1[l] <- df08$start.loop [df08$V2==offbout.index[l]+1] - start.loop [offbout.index[l]]
}
data.final$mean.time.off.bout[k] <-  base::mean (temp.var1, na.rm=TRUE) * sampling.rate
#
# length of on- bouts
temp.var2 <- NA
for (l in 1:base::length(onbout.index)) {
temp.var2[l] <- df08$start.loop [df08$V2==onbout.index[l]+1] - start.loop [onbout.index[l]]
}
data.final$mean.time.on.bout[k] <-  base::mean (temp.var2, na.rm=TRUE) * sampling.rate
}
library(incR)
devtools::document()
bouts.example <- incR.bouts (data=df.incubation,
vector.incubation="inc.vector",
sampling.rate= df.incubation$dec.time[5]-df.incubation$dec.time[4])
bouts.example
bouts.example
bouts.example
df$PRESENCE <- NULL
df <- read.csv ("../incR.example/data/K22iButton.0805.cameracali.csv")
head (df)
df <- read.csv ("../incR.example/data/K22iButton.0805.cameracali.csv")
df$PRESENCE <- NULL
df$ENTERING <- NULL
df$LEAVING <- NULL
df$MISSED <- NULL
head (df)
df$valueH <- NULL
head (df)
df.prep <- incR.prep (data= df,
date.name="DATE",
date.format="%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
inc.example <- incR.scan (data=df.prep,            # data frame
lower.time=22,           # beginning of calibrating window
upper.time=3,            # end of calibrating window
maxinc.Temp=38,          # temperature of incubation
sensitivity=0,           # correction when nest Tª is
# far below maxinc.Temp
time.dif=20,             # diff in Tª from maxinc.Temp that
# triggers sensitivity change
maxNightVar_accepted=2,  # max night variation accepted in
# calibrating windows
env.data=FALSE)          # is environmental data provided?
df.incubation <- inc.example[[1]]
df.activity <- incR.activity (data=df.incubation,
vector.presence="inc.vector")
head (df.incubation)
df.activity <- incR.activity (data=df.incubation,
vector.presence="inc.vector")
df.activity <- incR.activity (data=df.incubation,
vector.incubation ="inc.vector")
library(incR)
df.activity <- incR.activity (data=df.incubation,
vector.incubation ="inc.vector")
inc.constancy <- incR.constancy (data=df.incubation,          # data frame
vector.presence="inc.vector")
inc.constancy <- incR.constancy (data=df.incubation,          # data frame
vector.incubation ="inc.vector")
library(incR)
inc.constancy <- incR.constancy (data=df.incubation,          # data frame
vector.incubation ="inc.vector")
df.activity <- incR.activity (data=df.incubation,
vector.incubation ="inc.vector")
df.activity
bouts.example <- incR.bouts (data=df.incubation,
vector.incubation="inc.vector",
sampling.rate= df.incubation$dec.time[5]-df.incubation$dec.time[4])
bouts.example
data=df.incubation
limits=c(5,20)
coor=NULL
civil.twilight=FALSE
activity.times=TRUE
time.below= c(32)
if (base::is.null(data$date)) {
stop("No column with name 'date' found")
}
data.onoff.act <- data
df01 <- base::split (data, data$date)
data.final <- base::data.frame (date=rep(NA, length=length(df01)),
day.mean=rep(NA, length=length(df01)),
day.var=rep(NA, length=length(df01)),
night.mean=rep(NA, length=length(df01)),
night.var=rep(NA, length=length(df01)))
new.names <- paste ("Time_Under_", time.below, sep="")  # names for data final
?paste
time.below= c(10,25,32)
base::is.null(time.below)
new.names <- base::paste ("time.below", time.below, sep="")  # names for data final
new.names
new.names <- base::paste ("time.below_", time.below, sep="")  # names for data final
new.names
for (n in 1:length(time.below)) {
data.final[[new.names[n]]] <- NA
}
head(data.final)
?print
k=1
df00 <- df01[[k]]
base::as.character(base::unique(df00$date))
data.final$date[k] <- base::as.character(base::unique(df00$date))
if (base::is.null(data.onoff.act$inc.vector)) {
stop ("Your incubation.vector for incR.activity is not named 'inc.vector',
please, change its name to 'inc.vector' or specify it in
incR.t adding an argument as in incR.activity: 'incubation.vector= '")
}
act.times$index <- seq (1,to=base::nrow(act.times), by=1)
act.times <- incR.activity (data= data.onoff.act,
vector.incubation="inc.vector")
act.times$index <- seq (1,to=base::nrow(act.times), by=1)
act.times
act.times$index <- seq (1,to=base::nrow(act.times), by=1)
data=df.incubation[df.incubation$date=="2015-05-07",]
data.onoff.act <- data
df01 <- base::split (data, data$date)
# defining table to write results in
data.final <- base::data.frame (date=rep(NA, length=base::length(df01)),
day.mean=rep(NA, length=base::length(df01)),
day.var=rep(NA, length=base::length(df01)),
night.mean=rep(NA, length=base::length(df01)),
night.var=rep(NA, length=base::length(df01)))
# is there time.below need?
if (base::is.null(time.below)) {
base::print ("No calculation of 'time.below' required")
} else{
# creating new columns depending on time.below values
new.names <- base::paste ("time.below_", time.below, sep="")  # names for data final
for (n in 1:base::length(time.below)) {
data.final[[new.names[n]]] <- NA
}
}
#### final.data ready to store information ####
# loop to fill table of results
(base::length(df01))
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique(df00$date))
act.times <- incR.activity (data= data.onoff.act,
vector.incubation="inc.vector")
if (base::is.null(data.onoff.act$inc.vector)) {
stop ("Your incubation.vector for incR.activity is not named 'inc.vector',
please, change its name to 'inc.vector' or specify it in
incR.t adding an argument as in incR.activity: 'incubation.vector= '")
}
act.times$index <- seq (1,to=base::nrow(act.times), by=1)
act.times$index
act.times
is.na(act.times$onset[o])
o=1
base::nrow(act.times)
base::is.na(act.times$onset[o])
base::as.character(base::unique (df00$date))
if (activity.times==TRUE) {
# calculates onset and offset activity times
act.times <- incR.activity (data= data.onoff.act,
vector.incubation="inc.vector")
if (base::is.null(data.onoff.act$inc.vector)) {
stop ("Your incubation.vector for incR.activity is not named 'inc.vector',
please, change its name to 'inc.vector' or specify it in
incR.t adding an argument as in incR.activity: 'incubation.vector= '")
}
act.times$index <- seq (1,to=base::nrow(act.times), by=1)
}
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique(df00$date))
# based on the calculations above, day and night mean and var in temperature are
# calculated. Time limits for the calculations are needed
index.day <- act.times$index[act.times$date==base::as.character(base::unique (df00$date))]
day.morning <- act.times [act.times$date==as.character(unique (df00$date)), c("onset")]
day.evening <- act.times [act.times$date==as.character(unique (df00$date)), c("offset")]
night.evening <- act.times [act.times$date==as.character(unique (df00$date)), c("offset")]
night.morning <- act.times [act.times$index==index.day+1, c("onset")]
day.data <- df00[df00$dec.time > day.morning & df00$dec.time < day.evening, ]
data.final$day.mean[k] <- mean (day.data$valueT, na.rm=TRUE)
data.final$day.var[k] <- var (day.data$valueT, na.rm=TRUE)
#
# selecting time
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec.time > night.evening & df00$dec.time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec.time > night.evening & df00$dec.time < 24, ]
date.after <- unique (df00$date)+1
day.after <- df01[[as.character(date.after)]]
subset.morning <- day.after [day.after$dec.time > 0 & day.after$dec.time < night.morning, ]
subset.data <- rbind(subset.nightBefore, subset.morning)
}
}
?crepuscule
??crepuscule
library("maptools", lib.loc="~/R/win-library/3.2")
?seq
matrix
?matrix
base::is.null(time.zone)
is.null(time.zone)
if (base::is.null(time.zone)) {
stop ("Time zone not specified; please, do it by passing an extra argument
to the incR.t function as 'time.zone ='")
}
time.zone="GMT"
base::is.null(time.zone)
?as.POSIXct
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone)
unique (data$date)
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone)
maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE)
coor=c(45,10)
maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE)
maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE)
maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE)[1,2]
dawn <- maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE)
dusk <-  maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE)
dusk
dawn
?strsplit
dawn
base::strftime (dawn, format= "%H:%M:%S")
dawn
base::strsplit(base::strftime (dawn$time, format= "%H:%M:%S"),":")
df <- read.csv ("../incR.example/data/K22iButton.0805.cameracali.csv")
df$PRESENCE <- NULL
df$ENTERING <- NULL
df$LEAVING <- NULL
df$MISSED <- NULL
df$valueH <- NULL
df.prep <- incR.prep (data= df,
date.name="DATE",
date.format="%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
inc.example <- incR.scan (data=df.prep,            # data frame
lower.time=22,           # beginning of calibrating window
upper.time=3,            # end of calibrating window
maxinc.Temp=38,          # temperature of incubation
sensitivity=0,           # correction when nest Tª is
# far below maxinc.Temp
time.dif=20,             # diff in Tª from maxinc.Temp that
# triggers sensitivity change
maxNightVar_accepted=2,  # max night variation accepted in
# calibrating windows
env.data=FALSE)
df.incubation <- inc.example[[1]]
data=df.incubation[df.incubation$date=="2015-05-07",]
limits=c(5,20)
coor=c(45,5)
time.below= c(10,25,32)
if (base::is.null(data$date)) {
stop("No column with name 'date' found")
}
data.onoff.act <- data
df01 <- base::split (data, data$date)
# defining table to write results in
data.final <- base::data.frame (date=rep(NA, length=base::length(df01)),
day.mean=rep(NA, length=base::length(df01)),
day.var=rep(NA, length=base::length(df01)),
night.mean=rep(NA, length=base::length(df01)),
night.var=rep(NA, length=base::length(df01)))
if (base::is.null(time.below)) {
base::print ("No calculation of 'time.below' required")
} else{
# creating new columns depending on time.below values
new.names <- base::paste ("time.below_", time.below, sep="")  # names for data final
for (n in 1:base::length(time.below)) {
data.final[[new.names[n]]] <- NA
}
}
act.times <- incR.activity (data= data.onoff.act,
vector.incubation="inc.vector")
if (base::is.null(data.onoff.act$inc.vector)) {
stop ("Your incubation.vector for incR.activity is not named 'inc.vector',
please, change its name to 'inc.vector' or specify it in
incR.t adding an argument as in incR.activity: 'incubation.vector= '")
}
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
dawn <- maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE)
time.zone="GMT"
dawn <- maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE)
dusk <-  maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE)
dawn
dusk <-  base::na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE))
dusk <-  base::omit.na(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE))
??omit.na
??na.omit
na.omit.data.frame(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
library(data.frame)
library(data.table)
na.omit.data.frame(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
?na.omit
na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
dusk <-  na.omit(base::(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE))
# re-calculating decimal hours
dawn <- stats:na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
dawn <- stats::na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
dusk <-  stats::na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE))
dawn
dusk
base::sapply(base::strsplit(base::strftime (dawn$time, format= "%H:%M"),":"),
function(x) {
x <- as.numeric(x)
x[1]+x[2]/60
})
base::strsplit(dawn$time,":")
strsplit(as.character(dawn$time),":")
dawn$time
dawn$time,
dawn$time
strftime (dawn$time, format= "%H:%M")
strftime (dawn$time,
format= "%H:%M",
tz="GMT")
time.zone
base::sapply(base::strsplit(base::strftime (dawn$time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dec.dawn <- base::sapply(base::strsplit(base::strftime (dawn$time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dec.dusk <- base::sapply(base::strsplit(base::strftime (dusk$time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
as.character(ctm.times$time)
dawn
dusk
dawn$dec.dawn <- base::sapply(base::strsplit(base::strftime (dawn$time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dusk$dec.dusk <- base::sapply(base::strsplit(base::strftime (dusk$time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dawn
dusk
base::as.character(dawn$time)
base::as.character(as.POSIXlt(base::as.character(dawn$time),
tz = time.zone, format= "%Y-%m-%d"))
dusk$date <- base::as.character(as.POSIXlt(base::as.character(dawn$time),
tz = time.zone, format= "%Y-%m-%d"))
