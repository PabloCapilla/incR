temp.name="temperature",
lower.time=22,
upper.time=3,
sensitivity=0.15,
temp.diff=5,
maxNightVariation=2,
env.temp="env_temp")
names(incubation.analysis)
head(incubation.analysis[[1]])
head(incubation.analysis[[2]])
incRconstancy(data = incubation.analysis[[1]], vector.incubation = "incR_score")
incRactivity(data = incubation.analysis[[1]],
time_column = "time",
vector.incubation = "incR_score")
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = c(5.8,21),                 # time window
coor = NULL,
activity.times = FALSE,
civil.twilight = FALSE,
time.zone = NULL)
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = NULL,                 # time window
coor = NULL,
activity.times = TRUE,
civil.twilight = FALSE,
time.zone = "GMT",
time_column= "time",
vector.incubation="incR_score")
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = NULL,                 # time window
coor = c(39.5, 40.5),          # random coordinates
activity.times = FALSE,
civil.twilight = TRUE,
time.zone = "GMT")
bouts <- incRbouts(data = incubation.analysis[[1]],
vector.incubation = "incR_score",
sampling.rate = incubation.analysis[[1]]$dec_time[56] - incubation.analysis[[1]]$dec_time[55],
dec_time = "dec_time",
temp = "temperature")
head(bouts$total_bouts)
head(bouts$day_bouts)
devtools::document()
library(incR)
library(incR)
bouts <- incRbouts(data = incubation.analysis[[1]],
vector.incubation = "incR_score",
sampling.rate = incubation.analysis[[1]]$dec_time[56] - incubation.analysis[[1]]$dec_time[55],
dec_time = "dec_time",
temp = "temperature")
bouts
bout=1
eval(bout)
library(incR)
incRbouts(data = incubation.analysis[[1]],
vector.incubation = "incR_score",
sampling.rate = incubation.analysis[[1]]$dec_time[56] - incubation.analysis[[1]]$dec_time[55],
dec_time = "dec_time",
temp = "temperature")
bouts <- incRbouts(data = incubation.analysis[[1]],
vector.incubation = "incR_score",
sampling.rate = incubation.analysis[[1]]$dec_time[56] - incubation.analysis[[1]]$dec_time[55],
dec_time = "dec_time",
temp = "temperature")
head(bouts$total_bouts)
head(bouts$day_bouts)
library("incR")
data("incR_rawdata")  # loading the data
head(incR_rawdata)
incR_rawdata_prep <- incRprep(data = incR_rawdata,
date.name = "DATE",
date.format= "%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="temperature")
head(incR_rawdata_prep, 3)
data(incR_envdata)  # environmental data
head (incR_envdata)
incR_data <- incRenv (data.nest = incR_rawdata_prep,     # data set prepared by incRprep
data.env = incR_envdata,
env.temperature.name = "env_temperature",
env.date.name = "DATE",
env.date.format = "%d/%m/%Y %H:%M",
env.timezone = "GMT")
head (incR_data, 3)
incubation.analysis <- incRscan (data=incR_data,
temp.name="temperature",
lower.time=22,
upper.time=3,
sensitivity=0.15,
temp.diff=5,
maxNightVariation=2,
env.temp="env_temp")
names(incubation.analysis)
head(incubation.analysis[[1]])
head(incubation.analysis[[2]])
incRconstancy(data = incubation.analysis[[1]], vector.incubation = "incR_score")
incRactivity(data = incubation.analysis[[1]],
time_column = "time",
vector.incubation = "incR_score")
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = c(5.8,21),                 # time window
coor = NULL,
activity.times = FALSE,
civil.twilight = FALSE,
time.zone = NULL)
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = NULL,                 # time window
coor = NULL,
activity.times = TRUE,
civil.twilight = FALSE,
time.zone = "GMT",
time_column= "time",
vector.incubation="incR_score")
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = c(5,21),                 # time window
coor = NULL,
activity.times = FALSE,
civil.twilight = FALSE,
time.zone = NULL)
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = NULL,                 # time window
coor = NULL,
activity.times = TRUE,
civil.twilight = FALSE,
time.zone = "GMT",
time_column= "time",
vector.incubation="incR_score")
incRt(data = incubation.analysis[[1]],
temp.name = "temperature",
limits = NULL,                 # time window
coor = c(39.5, 40.5),          # random coordinates
activity.times = FALSE,
civil.twilight = TRUE,
time.zone = "GMT")
bouts <- incRbouts(data = incubation.analysis[[1]],
vector.incubation = "incR_score",
sampling.rate = incubation.analysis[[1]]$dec_time[56] - incubation.analysis[[1]]$dec_time[55],
dec_time = "dec_time",
temp = "temperature")
head(bouts$total_bouts)
head(bouts$day_bouts)
?c
library(incR)
head(bouts$total_bouts)
R.version()
R.Version()
R.Version()$$version.string
R.Version()$version.string
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
incRactivity (data=incR_procdata,
time_column="time",
vector.incubation="incR_score")
incR_procdata
incRactivity (data=incR_procdata,
time_column="time",
vector.incubation="incR_score")
head(incR_procdata)
data(incR_rawdata)
data(incR_envdata)
incR_procdata <- incRprep (data=incR_rawdata,
date.name= "DATE",
date.format= "%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="temperature")
incR_procdata <- incRenv (data.nest = incR_procdata,
data.env = incR_envdata,
env.temperature.name = "env_temperature",
env.date.name = "DATE",
env.date.format = "%d/%m/%Y %H:%M",
env.timezone = "GMT")
incR_procdata <- incRscan(data = incR_procdata,
temp.name = "temperature",
lower.time = 22,
upper.time = 3,
sensitivity = 0.15, temp.diff = 5,
maxNightVariation = 2,
env.temp = "env_temperature")
incR_procdata <- incRscan(data = incR_procdata,
temp.name = "temperature",
lower.time = 22,
upper.time = 3,
sensitivity = 0.15, temp.diff = 5,
maxNightVariation = 2,
env.temp = "env_temp")
head(incR_procdata)
incR_procdata <- incR_procdata$incRscan_data
devtools::use_data(incR_procdata, overwrite = TRUE, compress = "bzip2")
devtools::document()
library(incR)
head(incR_procdata)
devtools::document()
devtools::document()
devtools::document()
devtools::build_win()
library("incR")
library(incR)
head(data(incR_procdata))
he <- data(incR_procdata)
head(he)
library(incR)
data(incR_procdata)
head(incR_procdata)
incRbouts (data=incR_procdata,
vector.incubation="incR_score",
dec_time="dec_time",
temp="temperature",
sampling.rate=240)
incRbouts (data=incR_procdata,
vector.incubation="incR_score",
dec_time="dec_time",
temp="temperature",
sampling.rate=240)
data(incR_procdata)
incRbouts (data=incR_procdata,
vector.incubation="incR_score",
dec_time="dec_time",
temp="temperature",
sampling.rate=240)
library(incR)
library("devtools", lib.loc="~/R/win-library/3.4")
install.packages("dplyr")
data=incR_procdata
vector.incubation="incR_score"
dec_time="dec_time"
temp="temperature"
sampling.rate=240
if (base::is.null(data$date)){
stop("No column for 'date")
}
df01 <- base::split (data, data$date)
data.days <- base::data.frame (date=base::rep(NA, length=base::length(df01)),
number.on.bouts=base::rep(NA, length=base::length(df01)),
number.off.bouts=base::rep(NA, length=base::length(df01)),
mean.time.on.bout=base::rep(NA, length=base::length(df01)),
mean.time.off.bout=base::rep(NA, length=base::length(df01)))
data.bouts <- base::data.frame (date=base::rep(NA, length=base::length(df01)),
number.on.bouts=base::rep(NA, length=base::length(df01)),
number.off.bouts=base::rep(NA, length=base::length(df01)),
mean.time.on.bout=base::rep(NA, length=base::length(df01)),
mean.time.off.bout=base::rep(NA, length=base::length(df01)))
if (base::length(df01)==2){
final.loop <- 2
} else {                              ## if more than 2 days...
final.loop <- base::length(df01)-1}
list.bouts <- base::as.list(NA)
for (k in 1:final.loop) {
df00 <- df01[[k]]
# per day data
rle_incR_score_values <- base::rle(df00[[vector.incubation]])$values
rle_incR_score_length <- base::rle(df00[[vector.incubation]])$lengths
# data frame to store results
# defining table to write results in
data.bouts <- base::data.frame (date=base::rep(NA, length=base::length(rle_incR_score_values)),
type=base::rep(NA, length=base::length(rle_incR_score_values)),
start_time=base::rep(NA, length=base::length(rle_incR_score_values)),
duration=base::rep(NA, length=base::length(rle_incR_score_values)),
start_temp=base::rep(NA, length=base::length(rle_incR_score_values)),
final_temp=base::rep(NA, length=base::length(rle_incR_score_values)))
data.bouts$date <- base::as.character(base::unique (df00$date))  # working date
data.bouts$type <- base::ifelse(rle_incR_score_values == 1, "onbout", "offbout")
# metrics per bout
to_merge <- base::do.call(args = base::lapply(base::as.list(base::c(1:base::length(rle_incR_score_values))),
function(bout){
if(base::eval(bout) == 1){
start_time <- base::round(df00[[dec_time]][1], digits = 3)
duration <- rle_incR_score_length[bout] * sampling.rate
start_temp <- df00[[temp]][1]
final_temp <- df00[[temp]][base::sum(base::rle(df00[[vector.incubation]])$lengths[1:bout])]
} else {
start_time <- base::round(df00[[dec_time]][base::sum(base::rle(df00[[vector.incubation]])$lengths[1:(bout-1)])+1],
digits = 3)
duration <- rle_incR_score_length[bout] * sampling.rate
start_temp <- df00[[temp]][base::sum(base::rle(df00[[vector.incubation]])$lengths[1:(bout-1)])+1]
final_temp <- df00[[temp]][base::sum(base::rle(df00[[vector.incubation]])$lengths[1:bout])]
}
return(base::c(start_time, duration, start_temp, final_temp))
}),
what = "rbind")
data.bouts[,c(3:6)] <- to_merge
list.bouts[[k]] <- data.bouts
}
for (k in 1:final.loop) {
# selecting working day
df00 <- df01[[k]]
data.days$date[k] <- base::as.character(base::unique (df00$date))  # working date
# order data by date-time
df00 <- df00[base::order(lubridate::dmy_hm(df00$DATE)),]
# per day data
rle_incR_score_values <- base::rle(df00[[vector.incubation]])$values
rle_incR_score_length <- base::rle(df00[[vector.incubation]])$lengths
data.days$number.off.bouts[k] <- base::length(rle_incR_score_values[rle_incR_score_values == 0])
data.days$number.on.bouts[k] <- base::length(rle_incR_score_values[rle_incR_score_values == 1])
data.days$mean.time.on.bout[k] <- base::mean(rle_incR_score_length[rle_incR_score_values == 1]) * sampling.rate
data.days$mean.time.off.bout[k] <- base::mean(rle_incR_score_length[rle_incR_score_values == 0]) * sampling.rate
}
return(base::list(total_bouts = base::do.call(args = list.bouts, what = "rbind"),
day_bouts = data.days))
library(incR)
data(incR_procdata)
incRbouts (data=incR_procdata,
vector.incubation="incR_score",
dec_time="dec_time",
temp="temperature",
sampling.rate=240)
devtools::build_win()
R.version
R.version()
R.Version()
devtools::document()
install.packages("dplyr")
install.packages("dplyr")
devtools::document()
install.packages("Rcpp")
devtools::document()
library(incR)
data("incR_procdata")
incR_procdata
incRconstancy (data=incR_procdata,
vector.incubation="incR_score")
devtools::document()
#' @param data data frame containing a time-series vector of 1's and 0's (incubation scores),
data=incR_procdata
temp.name="temperature"
limits=c(6,19)
coor=NULL
time.zone=NULL
civil.twilight=FALSE
activity.times=FALSE
if (base::is.null(data$date)) {
stop("No column with name 'date' found")
}
data.onoff.act <- data
df01 <- base::split (data, data$date)
data.final <- base::data.frame (date=rep(NA, length=base::length(df01)),
day.mean=rep(NA, length=base::length(df01)),
day.var=rep(NA, length=base::length(df01)),
night.mean=rep(NA, length=base::length(df01)),
night.var=rep(NA, length=base::length(df01)))
if (activity.times==TRUE) {
# calculates first_offbout and last_onbout activity times
act.times <- incRactivity (data= data.onoff.act,
...)
act.times$first_offbout <- do.call(args = base::lapply(strsplit(act.times$first_offbout, " "),
FUN = function(x) {
time <- lubridate::hm(x)
lubridate::hour(time) + lubridate::minute(time)/60
}),
what = "rbind")
act.times$last_onbout <- do.call(args = base::lapply(strsplit(act.times$last_onbout, " "),
FUN = function(x) {
time <- lubridate::hm(x)
lubridate::hour(time) + lubridate::minute(time)/60
}),
what = "rbind")
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
} else {
if (civil.twilight==TRUE) {
if (base::is.null(time.zone)|| base::is.null(coor)) {
stop ("Time zone and/or coor not specified; please, do it by passing the argument
to the incRt function")
}
# calculates civil twilinght times
dawn <- stats::na.omit(maptools::crepuscule(crds=base::matrix(c(coor[1], coor[2]), nrow=1),
dateTime=base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
dawn$day_frac <- NULL
dawn$dusk <-  stats::na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE))[,2]
names(dawn) <- c("dawn.time", "dusk.time")
# re-calculating decimal hours
dawn$first_offbout <- do.call(args = base::lapply(base::as.list(dawn$dawn.time),
FUN = function(x) {
time <- lubridate::ymd_hms(x)
lubridate::hour(time) + lubridate::minute(time)/60
}),
what = "rbind")
dawn$last_onbout <- do.call(args = base::lapply(base::as.list(dawn$dusk.time),
FUN = function(x) {
time <- lubridate::ymd_hms(x)
lubridate::hour(time) + lubridate::minute(time)/60
}),
what = "rbind")
dawn$date <- base::as.character(as.POSIXlt(base::as.character(dawn$dawn.time),
tz = time.zone, format= "%Y-%m-%d"))
act.times <- dawn
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
} else {
if (length(limits) < 2) {stop ("Please specify 'limits'")} # are there limits available?
act.times <- base::data.frame (date=base::as.character(base::names(df01)),
first_offbout=rep(limits[1], length=base::length(df01)),
last_onbout=rep(limits[2], length=base::length(df01)))
base::names(act.times)<- c("date", "first_offbout", "last_onbout")
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
}
}
for (k in 1:(base::length(df01))) {
# each day one by one
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique(df00$date))
# based on the calculations above, day and night mean and var in temperature are
# calculated. Time limits for the calculations are needed
index <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("index")]
day.morning <- base::as.numeric(act.times[act.times$date==base::as.character(base::unique (df00$date)),
c("first_offbout")])
day.evening <- base::as.numeric(act.times [act.times$date==base::as.character(base::unique (df00$date)),
c("last_onbout")])
night.evening <- base::as.numeric(act.times [act.times$date==base::as.character(base::unique (df00$date)),
c("last_onbout")])
night.morning <- base::as.numeric(act.times[act.times$index==index+1, c("first_offbout")])
# once the limits are set, the correct time points need to be selected
#
# DAY CALCULATIONS
#
if (is.null(df00$dec_time)) {
stop("Dec_time column is missing. Please, use exactly that name.")
}
day.data <- df00[df00$dec_time > day.morning & df00$dec_time < day.evening, ]
data.final$day.mean[k] <- base::mean (day.data[[temp.name]], na.rm=TRUE)
data.final$day.var[k] <- stats::var (day.data[[temp.name]], na.rm=TRUE)
#
# NIGHT CALCULATIONS
#
# selecting time
# computing number after sorting the data by time limits
if (base::length(night.morning) > 0) { # is there one day ahead for calculations?
# selecting night window
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec_time > night.evening & df00$dec_time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec_time > night.evening & df00$dec_time < 24, ]
date.after <- base::unique (df00$date)+1
day.after <- df01[[base::as.character(date.after)]]
subset.morning <- day.after [day.after$dec_time > 0 & day.after$dec_time < night.morning, ]
subset.data <- base::rbind(subset.nightBefore, subset.morning)
}
}
data.final$night.mean[k] <- base::mean( subset.data[[temp.name]], na.rm=TRUE)
data.final$night.var[k] <- stats::var( subset.data[[temp.name]], na.rm=TRUE)
} else {
data.final$night.mean[k] <- NA
data.final$night.var[k] <- NA
}
}
devtoo
devtools::document()
devtools::document()
format(Sys.time(), ''%d %B, %Y'')
format(Sys.time(), '%d %B, %Y')
format(Sys.time(), '%d %B, %Y')
Sys.time(), '%d %B, %Y'
format(Sys.time(), '%d %B, %Y')
citation("incR")
devtools::build_win()
devtools::use_vignette(incR_pipeline)
devtools::use_vignette("incR_pipeline")
devtools::use_vignette("incR_pipeline")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("PabloCapilla/incR")
library(incR)
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
library(rstudioapi)
library("rstudioapi")
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
install.packages("rstudioapi")
rstudioapi::isAvailable("0.99.149")
devtools::document()
library(dplyr)
install.packages(rlang)
install.packages("rlang")
install.packages("dplyr")
devtools::document()
install.packages("Rcpp")
install.packages("Rcpp")
devtools::document()
R.Version()
devtools::document()
library(incR)
gpclibPermit()
install.packages("rgeos")
library(incR)
install.packages("qpdf")
install.packages("pkgsrc")
.libPaths()
devtools::release()
devtools::release()
devtools::release()
devtools::use_build_ignore("LICENSE")
library(incR)
read.dcf("DESCRIPTION")[,"Description"]
library(incR)
read.dcf("DESCRIPTION")[,"Description"]
read.dcf("DESCRIPTION")[,"Description"]
read.dcf("DESCRIPTION")[,"Description"]
devtools::submit_cran()
devtools::submit_cran()
