lower.time=22,
upper.time=5,
sensitivity=0.15,
temp.diff =5,
maxNightVar_accepted=1.5,
env.temp="env.temp")
incRincubationExample <- incubation.analysis[[1]]
incRincubationExample <- incRincubationExample[incRincubationExample$date=="2015-05-6",]
plot (incRincubationExample$dec.time, incRincubationExample$valueT,
col=incRincubationExample$inc.vector+1, pch=19)
incubation.analysis <- incRscan (data=incRdataExample2,
lower.time=22,
upper.time=5,
sensitivity=0.10,
temp.diff =5,
maxNightVar_accepted=1.5,
env.temp="env.temp")
incRincubationExample <- incubation.analysis[[1]]
incRincubationExample <- incRincubationExample[incRincubationExample$date=="2015-05-6",]
plot (incRincubationExample$dec.time, incRincubationExample$valueT,
col=incRincubationExample$inc.vector+1, pch=19)
incubation.analysis <- incRscan (data=incRdataExample2,
lower.time=22,
sensitivity=0.05,
upper.time=5,
temp.diff =5,
maxNightVar_accepted=1.5,
env.temp="env.temp")
incRincubationExample <- incubation.analysis[[1]]
incRincubationExample <- incRincubationExample[incRincubationExample$date=="2015-05-6",]
plot (incRincubationExample$dec.time, incRincubationExample$valueT,
col=incRincubationExample$inc.vector+1, pch=19)
incubation.analysis <- incRscan (data=incRdataExample2,
lower.time=22,
upper.time=5,
sensitivity=0.15,
temp.diff =3,
maxNightVar_accepted=1.5,
env.temp="env.temp")
incRincubationExample <- incubation.analysis[[1]]
incRincubationExample <- incRincubationExample[incRincubationExample$date=="2015-05-6",]
plot (incRincubationExample$dec.time, incRincubationExample$valueT,
col=incRincubationExample$inc.vector+1, pch=19)
?"incRdataExample"
data(incRdataExample)
df <- incRdataExample
df.prep <- incRprep (data= df,
date.name="DATE",
date.format="%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
inc.example <- incRscan (data=df.prep,            # data frame
lower.time=22,           # beginning of calibrating window
upper.time=3,            # end of calibrating window
sensitivity=0.15,        # correction when nest Tª is
# far below maxinc.Temp
temp.diff=5,             # diff in Tª from maxinc.Temp that
# triggers sensitivity change
maxNightVar_accepted=2,  # max night variation accepted in
# calibrating windows
env.temp="env.temp")
df.incubation <- inc.example[[1]]
plot.example <- df.incubation
plot (valueT ~ dec.time, data=plot.example,
pch=19,
main=list("Blue tit incubation 07/05/2015"),
xaxt="n", las=1, cex.axis=1.5,# no x-axis, horizontal y axis-labels and size
col=c("red", "black")[plot.example$inc.vector+1],# pch color defined by "inc.vector"
xlab=list("Time", cex=1.5),
ylab=list("Temperature (ºC)", cex=1.5))
plot (valueT ~ index, data=plot.example,
pch=19,
main=list("Blue tit incubation 07/05/2015"),
col=c("red", "black")[plot.example$inc.vector+1],# pch color defined by "inc.vector"
xaxt="n", las=1, cex.axis=1.5,# no x-axis, horizontal y axis-labels and size
xlab=list("Time", cex=1.5),
ylab=list("Temperature (ºC)", cex=1.5))
inc.example <- incRscan (data=df.prep,            # data frame
lower.time=22,           # beginning of calibrating window
upper.time=3,            # end of calibrating window
# far below maxinc.Temp
sensitivity=0.15,        # correction when nest Tª is
temp.diff=8,             # diff in Tª from maxinc.Temp that
# triggers sensitivity change
maxNightVar_accepted=2,  # max night variation accepted in
# calibrating windows
env.temp="env.temp")     # column with environmental tempertures
df.incubation <- inc.example[[1]]
plot.example <- df.incubation
plot (valueT ~ index, data=plot.example,
pch=19,
main=list("Blue tit incubation 07/05/2015"),
col=c("red", "black")[plot.example$inc.vector+1],# pch color defined by "inc.vector"
xaxt="n", las=1, cex.axis=1.5,# no x-axis, horizontal y axis-labels and size
xlab=list("Time", cex=1.5),
ylab=list("Temperature (ºC)", cex=1.5))
plot (valueT ~ index, data=plot.example,
pch=19,
main=list("Blue tit incubation 07/05/2015"),
xaxt="n", las=1, cex.axis=1.5,# no x-axis, horizontal y axis-labels and size
col=c("red", "black")[plot.example$inc.vector+1],# pch color defined by "inc.vector"
xlab=list("Time", cex=1.5),
ylab=list("Temperature (ºC)", cex=1.5))
plot.example <- df.incubation[df.incubation$date=="2015-05-07",]
# plot
plot (valueT ~ index, data=plot.example,
pch=19,
main=list("Blue tit incubation 07/05/2015"),
col=c("red", "black")[plot.example$inc.vector+1],# pch color defined by "inc.vector"
xaxt="n", las=1, cex.axis=1.5,# no x-axis, horizontal y axis-labels and size
xlab=list("Time", cex=1.5),
ylab=list("Temperature (ºC)", cex=1.5))
plot.example <- df.incubation[df.incubation$date=="2015-05-08",]
# plot
plot (valueT ~ index, data=plot.example,
pch=19,
main=list("Blue tit incubation 07/05/2015"),
col=c("red", "black")[plot.example$inc.vector+1],# pch color defined by "inc.vector"
xaxt="n", las=1, cex.axis=1.5,# no x-axis, horizontal y axis-labels and size
xlab=list("Time", cex=1.5),
ylab=list("Temperature (ºC)", cex=1.5))
library(incR)
devtools::document()
devtools::install_github("PabloCapilla/incR")
library(incR)
library(incR)
data("incRdataExample")
dt99 <- incRdataExample
head(df99)
head(dt99)
library(incR)
devtools::document()
env.data <- read.csv ("../Preparing examples/KELVINGROVE15.envTemp.csv")
str(env.data)
incRdataExample <- read.csv("../Preparing examples/K22iButton.0805.cameracali.csv")
incRdataExample$PRESENCE <- NULL
incRdataExample$ENTERING <- NULL
incRdataExample$LEAVING <- NULL
incRdataExample$MISSED <- NULL
incRdataExample$valueH <- NULL
incRdataExample$BOX <- NULL
# proccessed data
incRdataExample <- incRprep (data=incRdataExample,
date.name= "DATE",
date.format= "%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
incRdataExample <- incRprep (data=incRdataExample,
date.name= "DATE",
date.format= "%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
?incRenv
?incR::incRenv
?incR::incRenv
?incRenv
library(incR)
?incRenv
str(env.data)
env.data$SITE <- NULL
env.data$TYPE <- NULL
str(env.data)
env.data <- read.csv ("../Preparing examples/KELVINGROVE15.envTemp.csv")
env.data$SITE <- NULL
env.data$TYPE <- NULL
env.data$valueH <- NULL
str(env.data)
incRdataExample<- incRenv (data.env=env.data,
data.nest=incRdataExample,
env.temperature.name = "valueT",
env.date.name = "DATE",
env.date.format = "%d/%m/%Y %H:%M",
env.timezone = "GMT")
headincRdataExample
head(incRdataExample)
devtools::use_data(incRdataExample, overwrite = TRUE, compress = "bzip2")
incRdataExample$env.temp
names(incRdataExample)
incRdataExample$index <-NULL
incRdataExample$time <-NULL
incRdataExample$hour <-NULL
incRdataExample$year <-NULL
incRdataExample$date <-NULL
incRdataExample$dec.time <-NULL
incRdataExample$temp1<-NULL
names(incRdataExample)
devtools::use_data(incRdataExample, overwrite = TRUE, compress = "bzip2")
devtools::use_data(incRenvironmentalData, overwrite = TRUE, compress = "bzip2")
incRenvironmentalData <- env.data
devtools::use_data(incRenvironmentalData, overwrite = TRUE, compress = "bzip2")
str(env.data)
?strptime
?do.call
library(incR)
library(incR)
devtools::document
devtools::document()
devtools::document()
devtools::document()
?merge
data(incRenvironmentalData)  # environmental data
data(incRincubationExample)
new.data <- incRprep (data=incRdataExample,
date.name= "DATE",
date.format= "%d/%m/%Y %H:%M",
timezone="GMT",
temperature.name="valueT")
data.nest = new.data
data.env = incRenvironmentalData
env.temperature.name = "valueT"
env.date.name = "DATE"
env.date.format = "%d/%m/%Y %H:%M"
env.timezone = "GMT"
data.env$t <- base::strptime(data.env[[env.date.name]],
format=env.date.format,
tz=env.timezone)
data.env$time <-  base::strftime (data.env$t, format= "%H:%M")
data.env$date <-  base::as.Date( base::format(data.env$t,"%Y-%m-%d"))
data.env$index <-  base::seq(1, to= base::nrow(data.env), by=1)
data.env$hour <-  base::as.numeric( base::format (data.env$t, "%H"))
# necessary list
time.temp.list <- list(NA)
for (d in 1: base::length( base::split(data.env, data.env$date))) {
df00 <-  base::split(data.env, data.env$date)[[d]]
temp <-  base::as.numeric( base::tapply(df00[[env.temperature.name]],
df00$hour,
base::mean,
rm.na=TRUE))
hour <-  base::as.numeric( base::unique(df00$hour))
date <-  base::rep( base::unique( base::as.Date( base::strptime(df00$DATE,
format=env.date.format,
tz=env.timezone),"%Y-%m-%d"),
length= base::length(hour)))
time.temp.list[[d]] <-  base::data.frame(date=date, hour=hour, temp=temp)
}
time.temp <-  base::do.call("rbind",time.temp.list)
time.temp
time.temp$dateTime <- paste (time.temp$date, time.temp$hour, sep = " ")
time.temp$dateTime
data.nest$dateTime <- paste (data.nest$date, data.nest$hour, sep = " ")
data.nest$dateTime
data.nest[["env.temp"]] <- NA
for (p in 1: base::length( base::split(data.nest, data.nest[["date"]]))){
df.nest <-  base::split(data.nest, data.nest[["date"]])[[p]]
df.env <- time.temp[time.temp$date== base::unique(df.nest$date),]
for (h in 1: base::length(data.nest[["hour"]])){
hour.match <- data.nest[["hour"]][h]
index <- data.nest$index[data.nest$date== base::unique(df.nest$date) &
data.nest$hour==hour.match]
data.nest$env.temp[data.nest$date== base::unique(df.nest$date) &
data.nest$hour==hour.match] <-
base::rep(df.env$temp[df.env$hour==hour.match], length= base::length(index))
}
}
a <- data.nest$env.temp
merge (data.nest,  time.temp, by= intersect(data.nest$dateTime))
merge (data.nest,  time.temp, by= intersect("dateTime", "dateTime"))
b <- merge (data.nest,  time.temp, by= intersect("dateTime", "dateTime"))
head(b)
merge (data.nest,  time.temp, by= intersect("dateTime", "dateTime"))$temp
data.nest$env.temp2 <- merge (data.nest,  time.temp, by= intersect("dateTime", "dateTime"))$temp
plot (data.nest$env.temp, data.nest$env.temp2)
merge (data.nest,  time.temp,
by= intersect("dateTime", "dateTime"))
head(merge (data.nest,  time.temp,
by= intersect("dateTime", "dateTime")))
b <- merge (data.nest,  time.temp,
by= intersect("dateTime", "dateTime"))
plot (b$env.temp, b$temp)
time.temp$dateTime00 <- paste (time.temp$date, time.temp$hour, sep = " ")
time.temp$dateTime00 <- paste (time.temp$date, time.temp$hour, sep = " ")
data.nest[["env.temp"]] <- NA
data.nest$dateTime <- paste (data.nest$date, data.nest$hour, sep = " ")
b <- merge (data.nest,  time.temp,
by= intersect("dateTime", "dateTime00"))
plot (b$env.temp, b$temp)
for (p in 1: base::length( base::split(data.nest, data.nest[["date"]]))){
df.nest <-  base::split(data.nest, data.nest[["date"]])[[p]]
df.env <- time.temp[time.temp$date== base::unique(df.nest$date),]
for (h in 1: base::length(data.nest[["hour"]])){
hour.match <- data.nest[["hour"]][h]
index <- data.nest$index[data.nest$date== base::unique(df.nest$date) &
data.nest$hour==hour.match]
data.nest$env.temp[data.nest$date== base::unique(df.nest$date) &
data.nest$hour==hour.match] <-
base::rep(df.env$temp[df.env$hour==hour.match], length= base::length(index))
}
}
b <- merge (data.nest,  time.temp,
by= intersect("dateTime", "dateTime00"))
plot (b$env.temp, b$temp)
library(incR)
devtools::document()
?incRenv
?incRenv
library(incR)
?incRenv
library(incR)
devtools::document()
devtools::document()
install.packages("knitr")
library (knitr)
install.packages(sp)
library(incR)
devtools::document()
install.packages(maptools)
install.packages("maptools")
library(incR)
library(incR)
devtools::document()
devtools::document()
library(incR)
devtools::document()
library(incR)
?incR
library(incR)
options(help_type = "text")
devtools::document()
devtools::install_github("PabloCapilla/incR")
library(incR) #activate incR package
packageVersion("incR")
setwd("C:/Users/Pablo Capilla/Dropbox/na")
data <- read.csv("box67.csv", header = FALSE)
colnames(data) <- c("date-time", "temp")
### ambient data
ambient <- read.csv("ambient temp.csv", header = TRUE)
# new column for date and time
ambient$date <- paste (ambient$date, ambient$time, sep=" ")
head (ambient)
data.prep <- incRprep(data = data, date.name = "date-time", date.format = "%d/%m/%Y %H:%M",
timezone = "GMT",
temperature.name = "temp")
head(data.prep) # checking incRprep has worked fine
df <- incRenv(data.nest = data.prep,
data.env = ambient,
env.temperature.name="temp",
env.date.name = "date",
env.date.format = "%d/%m/%Y %H:%M",
env.timezone="GMT")
head(df,  n= 50)
scan.incubation <- incRscan (data = df,
temp.name = "temp",
lower.time = 22.5,
upper.time = 4,
sensitivity = 0.15,
temp.diff = 5,
maxNightVar_accepted = 2,
env.temp = "env.temp")
library(ggplot2) # install if it is not
ggplot (data = scan.incubation[[1]], aes(x=dec.time, y=temp)) +
facet_wrap(~date) +
geom_point(aes(colour=inc.vector)) +
geom_line(aes(x=dec.time, y=env.temp))
incRactivity(data=scan.incubation[[1]],
vector.incubation = "inc.vector")
head(scan.incubation[[1]])
incRbouts(data=scan.incubation[[1]],
vector.incubation = "inc.vector",
sampling.rate = 120
)
incRbouts(data=scan.incubation[[1]],
vector.incubation = "inc.vector",
sampling.rate = 0.04
)
incRt(data = scan.incubation[[1]], activity.times = TRUE)
incRconstancy(data=scan.incubation[[1]],
vector.incubation = "inc.vector")
incRt <- function (data,
temp.name,
limits=NULL,
coor=NULL,
activity.times=FALSE,
civil.twilight=FALSE,
time.zone=NULL) {
# checking whether there is a date column
if (base::is.null(data$date)) {
stop("No column with name 'date' found")
}
# data by days
data.onoff.act <- data
df01 <- base::split (data, data$date)
# defining table to write results in
data.final <- base::data.frame (date=rep(NA, length=base::length(df01)),
day.mean=rep(NA, length=base::length(df01)),
day.var=rep(NA, length=base::length(df01)),
night.mean=rep(NA, length=base::length(df01)),
night.var=rep(NA, length=base::length(df01)))
# this function allows three options to calculate nest temperatures between
# two periods of time within 24hrs.
# (1) you specify the time window you want
## to compute day and night mean and variation;
# (2) it takes onset and offset activity using incRactivity; or,
# (3) uses civil twilight times to define night
# times to define day and night periods and calculate variation and temperature.
#
# First I create a table which specifies such periods depending on 1, 2 or 3.
if (activity.times==TRUE) {
# calculates onset and offset activity times
act.times <- incRactivity (data= data.onoff.act,
vector.incubation="inc.vector")
if (base::is.null(data.onoff.act$inc.vector)) {
stop ("Your incubation.vector for incRactivity is not named 'inc.vector',
please, change its name to 'inc.vector' or specify it in
incRt adding an argument as in incRactivity: 'incubation.vector= '")
}
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
} else {
if (civil.twilight==TRUE) {
if (base::is.null(time.zone)|| base::is.null(coor)) {
stop ("Time zone and/or coor not specified; please, do it by passing the argument
to the incRt function")
}
# calculates civil twilinght times
dawn <- stats::na.omit(maptools::crepuscule(crds=base::matrix(c(coor[1], coor[2]), nrow=1),
dateTime=base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dawn", POSIXct.out=TRUE))
dawn$day_frac <- NULL
dawn$dusk <-  stats::na.omit(maptools::crepuscule(base::matrix(c(coor[1], coor[2]), nrow=1),
base::as.POSIXct (base::as.character(base::unique (data$date)),
tz=time.zone),
solarDep=6, direction="dusk", POSIXct.out=TRUE))[,2]
names(dawn) <- c("dawn.time", "dusk.time")
# re-calculating decimal hours
dawn$onset <- base::sapply(base::strsplit(base::strftime (dawn$dawn.time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dawn$offset <- base::sapply(base::strsplit(base::strftime (dawn$dusk.time,
format= "%H:%M",
tz=time.zone),":"),
function(x) {
x <- base::as.numeric(x)
x[1]+x[2]/60
})
dawn$date <- base::as.character(as.POSIXlt(base::as.character(dawn$dawn.time),
tz = time.zone, format= "%Y-%m-%d"))
act.times <- dawn
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
} else {
if (length(limits) < 2) {stop ("Please specify 'limits'")} # are there limits available?
act.times <- base::data.frame (date=base::as.character(base::names(df01)),
onset=rep(limits[1], length=base::length(df01)),
onset=rep(limits[2], length=base::length(df01)))
base::names(act.times)<- c("date", "onset", "offset")
act.times$index <- base::seq (1,to=base::nrow(act.times), by=1)
}
}
# loop to fill table of results
for (k in 1:(base::length(df01))) {
# each day one by one
df00 <- df01[[k]]
data.final$date[k] <- base::as.character(base::unique(df00$date))
# based on the calculations above, day and night mean and var in temperature are
# calculated. Time limits for the calculations are needed
index <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("index")]
day.morning <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("onset")]
day.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.evening <- act.times [act.times$date==base::as.character(base::unique (df00$date)), c("offset")]
night.morning <- act.times [act.times$index==index+1, c("onset")]
# once the limits are set, the correct time points need to be selected
#
# DAY CALCULATIONS
#
day.data <- df00[df00$dec.time > day.morning & df00$dec.time < day.evening, ]
data.final$day.mean[k] <- base::mean (day.data[[temp.name]], na.rm=TRUE)
data.final$day.var[k] <- stats::var (day.data[[temp.name]], na.rm=TRUE)
#
# NIGHT CALCULATIONS
#
# selecting time
# computing number after sorting the data by time limits
if (base::length(night.morning) > 0) { # is there one day ahead for calculations?
# selecting night window
if (night.evening < 24 && night.evening < night.morning) {
subset.data <- df00 [df00$dec.time > night.evening & df00$dec.time < night.morning, ]
} else {
if (night.evening < 24 && night.evening > night.morning) {
subset.nightBefore <- df00 [df00$dec.time > night.evening & df00$dec.time < 24, ]
date.after <- base::unique (df00$date)+1
day.after <- df01[[base::as.character(date.after)]]
subset.morning <- day.after [day.after$dec.time > 0 & day.after$dec.time < night.morning, ]
subset.data <- base::rbind(subset.nightBefore, subset.morning)
}
}
data.final$night.mean[k] <- base::mean( subset.data[[temp.name]], na.rm=TRUE)
data.final$night.var[k] <- stats::var( subset.data[[temp.name]], na.rm=TRUE)
} else {
data.final$night.mean[k] <- NA
data.final$night.var[k] <- NA
}
}
return (data.final)
}
incRt(data = scan.incubation[[1]], activity.times = TRUE)
incRt(data = scan.incubation[[1]], temp.name = "temp", activity.times = TRUE)
packageVersion("incR")   # new version is
ggplot (data = scan.incubation[[1]], aes(x=dec.time, y=temp)) +
facet_wrap(~date) +
geom_point(aes(colour=inc.vector)) +
geom_line(aes(x=dec.time, y=env.temp))
library(incR)
?roxygen2
install.packages("roxygen2")
?roxygen2
library(roxygen2)
install.packages("roxygen2")
document()
devtools::document()
